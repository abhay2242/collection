1> Map is a root interface of map hierarchy. It is a collection with mapping.
2> It is a prt of coolection framework available from Java 1.2v
3> If we want to store objects with mapping , it maeas if we want to store (KEY, VALUE) pair table format we must chosse map interface and its implementation classes.
4> Map interface does not maintain insertion order and does not have index.
5> Map interface has a sub interface 
     sortedMap and its has
     sub interface NavigabelMap
6> Sortedmap interface is for storing entire on keys based sorting oder. It is also available from Java 1.2V
7> NavigableMap is given in Java 6v , for adding more naviagtin methods to SortedMap.
8> Map interface has 7 implementation classes
     5 are CsF classes and 2 are lagecy classes
     HashMap, LinkedHashMap, EnumMap, WeakHashMap, IdentityHashMap, Hashtable, Properties.
     SortedMap and NavigableMap has only one implementation class TreeMap.

----------------------------------------------------------------------------------------------------------------------------------
                             MAP

     SortedMap
       |
    NavigableMap


HashMap    TreeMap   EnumMap   LinkedHashMap   IndentityMap   WeakHashMap  HashTable   Properties

-------------------------------------------------------------------------------------------------------------------------------------
HashMap -> 

1) HashMap is an Collection FrameWork collection.
      it  is avalable from Java 1.2V
      It is implementation of Map interface.

    -> when we want to store objects with mapping with unique keys in single thread appliction or in method local operation     
       without worrying insertion order we must choose HashMap.

2) It is non syncronized means not thread safe objects.
3) It  is unordered collection -> does not maintian the insertion order.
4) Its implementation data structure is hashtable.
5) Its default capacity is 16
     incremeantal capacity is double or +1
     load factor is 0.75 or 75%
6) It allows us to store 
      as keys -> only 3 types of objects [ Homogenous , Heterogenous and uniqu] 
      as value -> all 4 types of objects [ Homogenous, Heterogenous, Unique and Duplicate]

    HashMap by default can stop only refrence wise duplicates keys, 
    If we want stop data wise duplicates, we must override both hashcode() and equals() method in our class, else data wise
     duplicates keys are stored in collection.

HashMap internall memory structure

    -> HashMap internally used table data structure for storing entries
	-> Hash table data strutcture internally used another data structure called bucket
	      - bucket is also a collection, linked list, it is a group of same hashcode objects
		    for every new hashcode objects new bucket is created
	-> if we pass same hash code objects with diff refrence and diff state i t stored in the existing bucket.
	-> if new objects is storing with and existing objects hash code, we call it as hash collision when
	     hash collision is occured this new object must be stored in the same existing bucket. Hence this
		 new objects is comapred with existing objects abailable in this bucket by using == operator and 
		 equals() method.
    -> It this new objec is unique based on the both referece and state, it is stored in the same bucket.
	-> It this new objects is same eithre reference wise or data wise, existing value is replaced with 
	     this passed new value.
 

Algorithm 

		 1) when we add an entry, put(), method internally 
		         - first calls hashcode() method by using key objetcs
				 - then it searches for  a bucket in hash table with this key objects hash code.
				 - if bucket is not found,
				       it creates new bucket with this hash code as its identify and store this entiry directly
					   in this bucket without any comparision 
                - if bucket is found,
				      means there are some similar entries are found, hence this entry must be compared 
					  wheather  it is unique or not. For this purpose , put() method internally uses == operator
					  and equals() method.
					      
						  - first == operator is used for compared this entry key with existing keys by using 
						    refrence.  
							    if match found,
				    			   exisiting value is replaced with this new value.
					           if match not found with refrence ,
							      equals() method is called to compare them with data 
								     if match found with data,
									    existing value is replaced with this new value.
									if match not found
									  this entry is stored in this bucket.

===============================================================================================================================================

LinkedHashMap-



===============================================================================================================================================

EnumMap


=======================================================================================================================================

TreeMap-


======================================================================================================================================================

weakHashMap-


====================================================================================================================================================

IdentityMap-


=====================================================================================================================================================

HashTable



====================================================================================================================================================

Properties- 


======================================================================================================================================================



















